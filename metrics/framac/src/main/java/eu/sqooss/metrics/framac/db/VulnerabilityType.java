package eu.sqooss.metrics.framac.db;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import eu.sqooss.core.AlitheiaCore;
import eu.sqooss.service.db.DAObject;
import eu.sqooss.service.db.DBService;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement(name="vulnerabilityType")
@Entity
@Table(name="VULNERABILITY_TYPE")
public class VulnerabilityType extends DAObject {

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="VULNERABILITY_TYPE_ID")
	@XmlElement
	private long id;

	@XmlElement
	@Column(name="VULNERABILITY_TYPE_NAME")
	private String name;
	
	@XmlElement
	@Column(name="VULNERABILITY_TYPE_DESCRIPTION")
    private String description;
	
	@Override
	public long getId() {
		return id;
	}

	@Override
	public void setId(long id) {
		this.id = id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getDescription() {
		return description;
	}
	
	 /**
     * Get a list of distinct Vulnerability types that have been stored in the system
     * @return List of all Vulnerability types
     */
    public static List<VulnerabilityType> getVulnerabilityTypes() {
        DBService dbs = AlitheiaCore.getInstance().getDBService();
        
        StringBuilder q = new StringBuilder("from VulnerabilityType vt");
        
        Map<String,Object> params = new HashMap<String,Object>();
        return (List<VulnerabilityType>) dbs.doHQL(q.toString());  
    }
    
    /* Find a VulnerabilityType by name. If not found, create a new instance, store it and return it */
    public static VulnerabilityType getVulnerabilityType(
            String name,
            String description) {
        
        DBService dbs = AlitheiaCore.getInstance().getDBService();
  
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        parameterMap.put("name", name);

        List<VulnerabilityType> vtl = dbs.findObjectsByProperties(
                VulnerabilityType.class, parameterMap);

        if (!vtl.isEmpty())
            return vtl.get(0);

        VulnerabilityType vt = new VulnerabilityType();
        vt.setName(name);
        vt.setDescription(description);
        
        if (!dbs.addRecord(vt)) {
            return null;
        }
        return vt;
    }

}

//vi: ai nosi sw=4 ts=4 expandtab