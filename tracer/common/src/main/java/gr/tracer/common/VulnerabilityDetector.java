package gr.tracer.common;

import java.io.File;
import java.util.List;

import eu.sqooss.service.abstractmetric.AlitheiaPlugin;
import eu.sqooss.service.abstractmetric.AlreadyProcessingException;
import eu.sqooss.service.db.DAObject;
import gr.tracer.common.entities.db.VulnerabilityType;

public interface VulnerabilityDetector extends AlitheiaPlugin {

	/** Gets the path to the external tool that will be used to detect vulnerabilities. */
	public String getExternalToolPath();
	
	/** Returns a list of the types of vulnerabilities detected by the plugin. */
	public List<VulnerabilityType> getDetectedVulnerabilityTypes();

	/** Returns the name of the currently active configuration for the external tool, if
	 * more than one are supported by the plugin. Returns null in other cases. */
	public String getActiveConfigurationName();
	
	/** Gets the configuration handling mode for the given plugin. */
	public ConfigurationHandlingMode getConfigurationHandlingMode();
	
	/** Gets the invocation mode to be used for the external tool. */
	public ExternalToolInvocationMode getExternalToolInvocationMode();
	
	/**
	 * Call the appropriate processResults() method according to the type of the entity
	 * that is being processed.
	 *
	 * @param o
	 *                DAO which determines which sub-interface processResults
	 *                method is called.
	 * @param outputFile
	 * 				  The file containing the output of the external tool
	 */
	public void processResults(DAObject o, File outputFile)
			throws AlreadyProcessingException, Exception;

}