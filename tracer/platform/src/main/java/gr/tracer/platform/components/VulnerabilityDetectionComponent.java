package gr.tracer.platform.components;

import eu.sqooss.service.db.StoredProject;
import gr.tracer.common.entities.db.MonitoredProjectList;
import gr.tracer.common.entities.db.ProjectFileVulnerability;
import gr.tracer.common.entities.db.SecurityLibrary;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerComponent;

import java.util.List;
import java.util.Set;

public interface VulnerabilityDetectionComponent extends TracerComponent {
	
	/**
	 * Record detected Vulnerability types to the database
	 * @param sProjVul A {@link java.util.List} of Project file vulnerabilities
	 * @return true or false whether the method executed successful or not
	 */
	public boolean addToDetectedVulnerabilities(List<ProjectFileVulnerability> sProjVul);
	
	/**
	 * Retrieve the Security libraries treating a Vulnerability type
	 * @param vtName The Vulnerability type's name
	 * @return A {@link java.util.Set} of Security libraries or null if the Vulnerability type is not associated with any Security libraries
	 */
	public Set<SecurityLibrary> getSecurityLibrariesTreatingVulnerabilityType(String vtName);

	/**
	 * Retrieve the Vulnerability types detected by a Security profile
	 * @param spName The Security profile's name
	 * @return A {@link java.util.Set} of Vulnerability types or null if the Security profile is not associated with any Vulnerability types 
	 */
	public Set<VulnerabilityType> getVulnerabilityTypesDetectedBySecurityProfile(String spName);
	
	/**
	 * Retrieve the Monitored project list corresponding to a Security profile
	 * @param spName The Security profile's name
	 * @return A Monitored project list or null if the Monitored project list is not found
	 */
	public List<MonitoredProjectList> getMonitoredProjectListBySecurityProfile(String spName);
	
	/**
	 * Retrieve the Monitored project lists corresponding to a User
	 * @param userName The User's username
	 * @return A {@link java.util.List} of Monitored project lists or null if the User is not associated with any Monitored project lists
	 */
	public List<MonitoredProjectList> getMonitoredProjectListByUser(String userName);
	
	/**
	 * Retrieve the Stored projects corresponding to a Monitored project list
	 * @param mplName The Monitored project list's name
	 * @return A {@link java.util.Set} of Stored projects or null if the Monitored project list is not associated with any Vulnerability types Stored projects
	 */
	public Set<StoredProject> getStoredProjectsOfMonitoredProjectList(String mplName);
}
