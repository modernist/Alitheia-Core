package gr.tracer.platform.components;

import eu.sqooss.core.AlitheiaCore;
import eu.sqooss.service.db.DBService;
import eu.sqooss.service.db.StoredProject;
import eu.sqooss.service.db.User;
import eu.sqooss.service.logging.Logger;
import gr.tracer.common.entities.db.MonitoredProjectList;
import gr.tracer.common.entities.db.MonitoredProjectListProject;
import gr.tracer.common.entities.db.SecurityLibrary;
import gr.tracer.common.entities.db.SecurityProfile;

import eu.sqooss.service.security.SecurityManager;
import eu.sqooss.service.logging.Logger;
import gr.tracer.common.entities.db.ProjectFileVulnerability;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerPlatform;


import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class VulnerabilityDetectionComponentImpl implements
		VulnerabilityDetectionComponent {
	
	private TracerPlatform platform;
	private Logger logger;
	private DBService dbs;
	private Map<String, Object> monProjListProps;
	private Object lockObject = new Object();

	/*
     * Parameterless constructor of the class.
     */
	public VulnerabilityDetectionComponentImpl () {
		monProjListProps = new Hashtable<String, Object>(1);
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#addToDetectedVulnerabilities(java.util.List)
     */
	@Override
	public boolean addToDetectedVulnerabilities(List<ProjectFileVulnerability> sProjVul) {
		
		SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
		try {
			Iterator<ProjectFileVulnerability> it = sProjVul.iterator();
			ProjectFileVulnerability pvf;
			
			if (dbs.startDBSession()) {
				while(it.hasNext()){
					pvf = it.next();
					VulnerabilityType vt = spc.searchVulnerabilityType(pvf.getVulnerabilityType().getName());
					if (vt == null) {
						vt = spc.createVulnerabilityType(pvf.getVulnerabilityType().getName(), pvf.getVulnerabilityType().getName());
						pvf.setVulnerabilityType(vt);
					} else
						pvf.setVulnerabilityType(vt);
					dbs.addRecord(pvf);
				}
			return true;
			} else
				return false;
		} finally {
			if (dbs.isDBSessionActive())
				dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getSecurityLibrariesTreatingVulnerabilityType(java.lang.String)
     */
	@Override
	public HashSet<SecurityLibrary> getSecurityLibrariesTreatingVulnerabilityType(
			String vtName) {
		SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
		VulnerabilityType vt = spc.searchVulnerabilityType(vtName);
		
		if (vt != null)
			return (HashSet<SecurityLibrary>) vt.getTreatingSecurityLibraries();
		else
			return null;
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getVulnerabilityTypesDetectedBySecurityProfile(java.lang.String)
     */
	@Override
	public HashSet<VulnerabilityType> getVulnerabilityTypesDetectedBySecurityProfile(
			String spName) {
		
		SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
		SecurityProfile sp = spc.searchSecurityProfile(spName);
		
		if (sp != null)
			return (HashSet<VulnerabilityType>) sp.getDetectedVulnerabilityTypes();
		else
			return null;
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getMonitoredProjectListBySecurityProfile(java.lang.String)
     */
	@Override
	public MonitoredProjectList getMonitoredProjectListBySecurityProfile(
			String spName) {
		
		SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
		SecurityProfile sp = spc.searchSecurityProfile(spName);
		
		List<MonitoredProjectList> mpls = null;
		try {
			if (dbs.startDBSession() && (sp != null)) {
				synchronized (lockObject) {
					monProjListProps.clear();
					monProjListProps.put("securityProfile", sp);
					mpls = dbs.findObjectsByProperties(MonitoredProjectList.class, monProjListProps);
					return (mpls.size() > 0 && mpls != null) ? mpls.get(0) : null;
				}
			} else {
				return null;
			}
		} finally {
			dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getMonitoredProjectListByUser(java.lang.String)
     */
	@Override
	public List<MonitoredProjectList> getMonitoredProjectListByUser(String userName) {
		
		SecurityManager sm = AlitheiaCore.getInstance().getSecurityManager();
		
		User user = sm.getUserManager().getUser(userName);
		
		List<MonitoredProjectList> mpls = null;
		try {
			if (dbs.startDBSession() && (user != null)) {
				synchronized (lockObject) {
					monProjListProps.clear();
					monProjListProps.put("user", user);
					mpls = dbs.findObjectsByProperties(MonitoredProjectList.class, monProjListProps);
					return (mpls != null) ? mpls : null;
				}
			} else {
				return null;
			}
		} finally {
			dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getStoredProjectsOfMonitoredObservedProjectList(java.lang.String)
     */
	@Override
	public HashSet<StoredProject> getStoredProjectsOfMonitoredProjectList(
			String mplName) {
		
		SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
		MonitoredProjectList mpl = spc.searchMonitoredProjectList(mplName);
		HashSet<MonitoredProjectListProject> mplps = null;
		if (mpl != null)
			mplps = (HashSet<MonitoredProjectListProject>) mpl.getProjects();
		else
			return null;
		
		HashSet<StoredProject> storProjs = new HashSet<StoredProject>();
		MonitoredProjectListProject mplp;
		Iterator<MonitoredProjectListProject> it = mplps.iterator();		
		while (it.hasNext()){
			mplp = it.next();
			storProjs.add(mplp.getProject());
		}		
		return storProjs;
	}

	@Override
	public void initComponent(TracerPlatform platform, Logger logger) {
		this.platform = platform;
		this.logger = logger;
	}

	@Override
	public boolean startUp() {
		try {
			this.dbs = AlitheiaCore.getInstance().getDBService();
			SecurityProfileComponent spc = platform.getComponent(SecurityProfileComponent.class);
			
			if (spc.searchSecurityLibrary("SQL library name") == null) {
				if (spc.createSecurityLibrary("SQL library name", "SQL library description") != null)
					System.out.println("Security library created");
				else
					System.out.println("Security library not created");
			}
			else
				System.out.println("Security library found");
			
			if (spc.searchSecurityLibrary("XSS library name") == null) {
				if (spc.createSecurityLibrary("XSS library name", "XSS library description") != null)
					System.out.println("Security library created");
				else
					System.out.println("Security library not created");
			}
			else
				System.out.println("Security library found");
			
			if (spc.searchVulnerabilityType("SQL name") == null) {
				if (spc.createVulnerabilityType("SQL name", "SQL description") != null)
					System.out.println("Vulnerability type created");
				else
					System.out.println("Vulnerability type not created");
			}
			else
				System.out.println("Vulnerability type found");
			
			if (spc.searchVulnerabilityType("XSS name") == null) {
				if (spc.createVulnerabilityType("XSS name", "XSS description") != null)
					System.out.println("Vulnerability type created");
				else
					System.out.println("Vulnerability type not created");
			}
			else
				System.out.println("Vulnerability type found");
			
			if (spc.addSecurityLibraryToVulnerabilityType("XSS library name", "XSS name"))
				System.out.println("Vulnerability type associated with Security library");
			else
				System.out.println("Vulnerability type not associated with Security library");
			
			if (spc.searchSecurityProfile("Security profile 2 name") == null) {
				if (spc.createSecurityProfile("Security profile 2 name", "Security profile 2 description") != null)
					System.out.println("Security profile created");
				else
					System.out.println("Security profile not created");
			}
			else
				System.out.println("Security profile found");
			
			if (spc.searchMonitoredProjectList("Monitored project list 2 name") == null) {
				if (spc.createMonitoredProjectList("Monitored project list 2 name", "Monitored project list 2 description", "fotis", "Security profile 2 name") != null)
					System.out.println("Monitored project list created");
				else
					System.out.println("Monitored project list not created");
			}
			else
				System.out.println("Monitored project list found");
			
			
			System.out.println("Security profile " + 
					(spc.setSecurityProfileToList("Security profile 2 name", "Monitored project list 2 name") ? "" : "not ")+
					"associated with Monitored project list");
			
	//		if (spc.addProjectToMonitoredProjectList("Stored project 1", "Monitored project list 1 name"))
	//			System.out.println("Security profile associated with Monitored project list");
	//		else
	//			System.out.println("Security profile not associated with Monitored project list");
	//		
	//		if (spc.addProjectToMonitoredProjectList("Stored project 2", "Monitored project list 1 name"))
	//			System.out.println("Security profile associated with Monitored project list");
	//		else
	//			System.out.println("Security profile not associated with Monitored project list");
	//			System.out.println("Security profile associated with Monitored project list");
	//		else
	//			System.out.println("Security profile not associated with Monitored project list");
			
	//		if (spc.addProjectToMonitoredProjectList("Stored project 1", "Monitored project list 1 name"))
	//			System.out.println("Security profile associated with Monitored project list");
	//		else
	//			System.out.println("Security profile not associated with Monitored project list");
	//		
	//		if (spc.addProjectToMonitoredProjectList("Stored project 2", "Monitored project list 1 name"))
	//			System.out.println("Security profile associated with Monitored project list");
	//		else
	//			System.out.println("Security profile not associated with Monitored project list");
			
			if ((spc.searchVulnerabilityType("SQL name") != null) && 
					(spc.searchSecurityProfile("Security profile 2 name") != null)) {
				if (spc.addVulnerabilityTypeToSecurityProfile("SQL name", "Security profile 2 name"))
					System.out.println("SQL Vulnerability type associated with Security profile");
				else
					System.out.println("SQL Vulnerability type not associated with Security profile");
			}	
			
			if (spc.addVulnerabilityTypeToSecurityProfile("XSS name", "Security profile 2 name"))
				System.out.println("XSS Vulnerability type associated with Security profile");
			else
				System.out.println("XSS Vulnerability type not associated with Security profile");
			
			
			return true;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean shutDown() {
		return true;
	}
}
