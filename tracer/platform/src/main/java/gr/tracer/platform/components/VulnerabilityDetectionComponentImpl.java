package gr.tracer.platform.components;

import eu.sqooss.core.AlitheiaCore;
import eu.sqooss.service.db.DBService;
import eu.sqooss.service.db.ProjectFile;
import eu.sqooss.service.db.StoredProject;
import eu.sqooss.service.db.User;
import eu.sqooss.service.logging.Logger;
import gr.tracer.common.entities.db.MonitoredProjectList;
import gr.tracer.common.entities.db.SecurityLibrary;
import gr.tracer.common.entities.db.SecurityProfile;

import eu.sqooss.service.security.SecurityManager;
import gr.tracer.common.entities.db.ProjectFileVulnerability;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerPlatform;


import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class VulnerabilityDetectionComponentImpl implements
		VulnerabilityDetectionComponent {
	
	private TracerPlatform platform;
	private DBService dbs;
	private Map<String, Object> monProjListProps;
	private Object lockObject = new Object();
	private SecurityProfileComponent spc;

	/*
     * Parameterless constructor of the class.
     */
	public VulnerabilityDetectionComponentImpl () {
		monProjListProps = new Hashtable<String, Object>(1);
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#addToDetectedVulnerabilities(java.util.List)
     */
	@Override
	public boolean addToDetectedVulnerabilities(List<ProjectFileVulnerability> sProjVul) {
		
		try {
			Iterator<ProjectFileVulnerability> it = sProjVul.iterator();
			ProjectFileVulnerability pfv;
			VulnerabilityType vt;
			
			if (dbs.startDBSession()) {
				while(it.hasNext()){
					
					pfv = it.next();
					
					if ((pfv.getVulnerabilityType() != null) && (pfv.getProjectFile() != null)) {
						if (!(pfv.getVulnerabilityType().getId() != 0)) {
							vt = spc.searchVulnerabilityType(pfv.getVulnerabilityType().getName());
							if (vt == null) {
								vt = spc.createVulnerabilityType(pfv.getVulnerabilityType().getName(), pfv.getVulnerabilityType().getName());
								pfv.setVulnerabilityType(vt);
							} 
						}
					}
					
					dbs.addRecord(pfv);
				}
			return true;
			} else
				return false;
		} finally {
			if (dbs.isDBSessionActive())
				dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getSecurityLibrariesTreatingVulnerabilityType(java.lang.String)
     */
	@Override
	public HashSet<SecurityLibrary> getSecurityLibrariesTreatingVulnerabilityType(
			String vtName) {
		VulnerabilityType vt = spc.searchVulnerabilityType(vtName);
		
		if (vt != null)
			return new HashSet<SecurityLibrary>(vt.getTreatingSecurityLibraries());
		else
			return null;
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getVulnerabilityTypesDetectedBySecurityProfile(java.lang.String)
     */
	@Override
	public HashSet<VulnerabilityType> getVulnerabilityTypesDetectedBySecurityProfile(
			String spName) {
		
		SecurityProfile sp = spc.searchSecurityProfile(spName);
		
		if (sp != null)
			return new HashSet<VulnerabilityType>(sp.getDetectedVulnerabilityTypes());
		else
			return null;
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getMonitoredProjectListBySecurityProfile(java.lang.String)
     */
	@Override
	public List<MonitoredProjectList> getMonitoredProjectListBySecurityProfile(
			String spName) {
		
		SecurityProfile sp = spc.searchSecurityProfile(spName);
		
		List<MonitoredProjectList> mpls = null;
		try {
			if (dbs.startDBSession() && (sp != null)) {
				synchronized (lockObject) {
					monProjListProps.clear();
					monProjListProps.put("securityProfile", sp);
					mpls = dbs.findObjectsByProperties(MonitoredProjectList.class, monProjListProps);
					return (mpls != null) ? mpls : null;
				}
			} else {
				return null;
			}
		} finally {
			dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getMonitoredProjectListByUser(java.lang.String)
     */
	@Override
	public List<MonitoredProjectList> getMonitoredProjectListByUser(String userName) {
		
		SecurityManager sm = AlitheiaCore.getInstance().getSecurityManager();
		
		User user = sm.getUserManager().getUser(userName);
		
		List<MonitoredProjectList> mpls = null;
		try {
			if (dbs.startDBSession() && (user != null)) {
				synchronized (lockObject) {
					monProjListProps.clear();
					monProjListProps.put("user", user);
					mpls = dbs.findObjectsByProperties(MonitoredProjectList.class, monProjListProps);
					return (mpls != null) ? mpls : null;
				}
			} else {
				return null;
			}
		} finally {
			dbs.commitDBSession();
		}
	}
	
	/**
     * @see gr.tracer.platform.components.VulnerabilityDetectionComponent#getStoredProjectsOfMonitoredObservedProjectList(java.lang.String)
     */
	@Override
	public HashSet<StoredProject> getStoredProjectsOfMonitoredProjectList(
			String mplName) {
		
		MonitoredProjectList mpl = spc.searchMonitoredProjectList(mplName);
		if (mpl != null)
			return new HashSet<StoredProject>(mpl.getProjects());
		else
			return null;
	}

	@Override
	public void initComponent(TracerPlatform platform, Logger logger) {
		this.platform = platform;
	}

	@Override
	public boolean startUp() {
		try {
			this.dbs = AlitheiaCore.getInstance().getDBService();
			spc = platform.getComponent(SecurityProfileComponent.class);
			Iterator it;
			
			securityLibraryTest(spc, "SQL library name", "SQL library description");
			securityLibraryTest(spc, "XSS library name", "XSS library description");
						
			vulnerabilityTypeTest(spc, "SQL name", "SQL description");
			vulnerabilityTypeTest(spc, "XSS name", "XSS description");
			
			securityProfileTest(spc, "Security profile 1 name", "Security profile 1 description");
			securityProfileTest(spc, "Security profile 2 name", "Security profile 2 description");
			securityProfileTest(spc, "Security profile 3 name", "Security profile 3 description");
			
			monitoredProjectListTest(spc, "Monitored project list 1 name", "Monitored project list 1 description", "Security profile 2 name");
			monitoredProjectListTest(spc, "Monitored project list 2 name", "Monitored project list 2 description", "Security profile 1 name");
			monitoredProjectListTest(spc, "Monitored project list 3 name", "Monitored project list 3 description");
			
			securityLibraryToVulnerabilityTypeAssociationTest(spc, "SQL library name", "SQL name");
			securityLibraryToVulnerabilityTypeAssociationTest(spc, "XSS library name", "XSS name");
			
			securityProfileMonitoredProjectListAssociationTest(spc, "Security profile 2 name", "Monitored project list 2 name");
			securityProfileMonitoredProjectListAssociationTest(spc, "Security profile 3 name", "Monitored project list 3 name");
			
			securityProfileVulnerabilityTypeAssociationTest(spc, "SQL name", "Security profile 2 name");
			securityProfileVulnerabilityTypeAssociationTest(spc, "XSS name", "Security profile 1 name");
			
			securityProfileRemoveVulnerabilityTypeAssociationTest(spc, "SQL name", "Security profile 2 name");
						
			projectToMonitoredProjectListAssociationTest(spc, "Stored project 1", "Monitored project list 1 name");
			projectToMonitoredProjectListAssociationTest(spc, "Stored project 2", "Monitored project list 1 name");
			projectToMonitoredProjectListAssociationTest(spc, "Stored project 1", "Monitored project list 2 name");
			projectToMonitoredProjectListAssociationTest(spc, "Stored project 2", "Monitored project list 2 name");
			
			removeProjectFromMonitoredProjectListAssociationTest(spc, "Stored project 1", "Monitored project list 2 name");
			
			testAddToDetectedVulnerabilities(spc);
			
			HashSet<SecurityLibrary> slTreatVt = getSecurityLibrariesTreatingVulnerabilityType("SQL name");
			it = slTreatVt.iterator();
			System.out.println("Get SecurityLibraries Treating VulnerabilityType");
			while (it.hasNext()) {
				SecurityLibrary sl = (SecurityLibrary) it.next();
				System.out.println("SecurityLibrary " + sl.getName());
			}
			
			HashSet<VulnerabilityType> vtDetectedSp = getVulnerabilityTypesDetectedBySecurityProfile("Security profile 1 name");
			it = vtDetectedSp.iterator();
			System.out.println("Get VulnerabilityTypes Detected By SecurityProfile");
			while (it.hasNext()) {
				VulnerabilityType vt = (VulnerabilityType) it.next();
				System.out.println("VulnerabilityType " + vt.getName());
			}
			
			List<MonitoredProjectList> mplBySecProf = getMonitoredProjectListBySecurityProfile("Security profile 2 name");
			it = mplBySecProf.iterator();
			System.out.println("Get MonitoredProjectList By SecurityProfile");
			while (it.hasNext()) {
				MonitoredProjectList mpl1 = (MonitoredProjectList) it.next();
				System.out.println("MonitoredProjectList " + mpl1.getName());
			}
						
			List<MonitoredProjectList> mplByUser = getMonitoredProjectListByUser("fotis");
			it = mplByUser.iterator();
			System.out.println("Get MonitoredProjectList By User");
			while (it.hasNext()) {
				MonitoredProjectList mpl1 = (MonitoredProjectList) it.next();
				System.out.println("MonitoredProjectList " + mpl1.getName());
			}
						
			HashSet<StoredProject> spOfmpl = getStoredProjectsOfMonitoredProjectList("Monitored project list 1 name");
			it = spOfmpl.iterator();
			System.out.println("Get StoredProjects Of MonitoredProjectList");
			while (it.hasNext()) {
				StoredProject spr = (StoredProject) it.next();
				System.out.println("StoredProject " + spr.getName());
			}
			
			return true;
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	private void testAddToDetectedVulnerabilities(SecurityProfileComponent spc) {
		List<ProjectFileVulnerability> sProjVul = new ArrayList<ProjectFileVulnerability>();
		ProjectFileVulnerability pfv = new ProjectFileVulnerability();
		
		dbs.startDBSession();
		ProjectFile pf = new ProjectFile();
		pf.setName("Project file 1");
		dbs.addRecord(pf);
		dbs.commitDBSession();
		dbs.startDBSession();
		pf.setId(36);
		VulnerabilityType vt = spc.searchVulnerabilityType("SQL name");
		pfv.setDescription("Description of ProjectFileVulnerability 1");
		pfv.setLocation("Location of ProjectFileVulnerability 1");
		pfv.setProjectFile(pf);
		pfv.setVulnerabilityType(vt);
		sProjVul.add(pfv);
		
		if (addToDetectedVulnerabilities(sProjVul))
			System.out.println("Record Vulnerability type SQL name in Project file 1:");
		else
			System.out.println("Not recorded Vulnerability type SQL name in Project file 1:");
	}
	
	private void projectToMonitoredProjectListAssociationTest(
			SecurityProfileComponent spc, String spName, String mplName) {
		
		dbs.startDBSession();
		StoredProject sp = StoredProject.getProjectByName(spName);
		if(sp == null) {
			sp = new StoredProject(spName);
			//sp.setScmUrl("git-https://github.com/modernist/Alitheia-Core.git");
			dbs.addRecord(sp);
			dbs.commitDBSession();
			dbs.startDBSession();
		}
		
		if (spc.addProjectToMonitoredProjectList(spName, mplName))
			System.out.println("Project:'" + spName + "' associated with Monitored project list:'"+ mplName +"'");
		else
			System.out.println("Project:'" + spName + "' NOT associated with Monitored project list:'"+ mplName +"'");
	}
	
	private void removeProjectFromMonitoredProjectListAssociationTest(
			SecurityProfileComponent spc, String spName, String mplName) {
		if (spc.removeProjectFromMonitoredProjectList(spName, mplName))
			System.out.println("Project:'" + spName + "' removed from Monitored project list:'"+ mplName +"'");
		else
			System.out.println("Project:'" + spName + "' NOT removed from Monitored project list:'"+ mplName +"'");
	}
	
	private void securityLibraryToVulnerabilityTypeAssociationTest(
			SecurityProfileComponent spc, String libName, String vulnTypeName) {
		if (spc.addSecurityLibraryToVulnerabilityType(libName, vulnTypeName))
			System.out.println("Vulnerability type:'"+ vulnTypeName +"' associated with Security library:'"+ libName +"'");
		else
			System.out.println("Vulnerability type:'"+ vulnTypeName +"' NOT associated with Security library:'"+ libName +"'");
	}
	
	private void securityProfileMonitoredProjectListAssociationTest(
			SecurityProfileComponent spc, String spName, String mplName) {
		System.out.println("Security profile:'" + spName + "'" + 
			(spc.setSecurityProfileToList(spName, mplName) ? "' " : "' NOT ")+
			"associated with Monitored project list:'" + mplName +"'");
	}
	
	private void securityProfileVulnerabilityTypeAssociationTest(
			SecurityProfileComponent spc, String vulnTypeName, String secProfName) {
		if (spc.addVulnerabilityTypeToSecurityProfile(vulnTypeName, secProfName))
			System.out.println("Vulnerability type:'" + vulnTypeName + 
					"' associated with Security profile:'" + secProfName + "'");
		else
			System.out.println("Vulnerability type:'" + vulnTypeName + 
					"' NOT associated with Security profile:'" + secProfName + "'");
	}
	
	private void securityProfileRemoveVulnerabilityTypeAssociationTest(
			SecurityProfileComponent spc, String vulnTypeName, String secProfName) {
		if (spc.removeVulnerabilityTypeFromSecurityProfile(vulnTypeName, secProfName))
			System.out.println("Vulnerability type:'" + vulnTypeName + 
					"' removed association from Security profile:'" + secProfName + "'");
		else
			System.out.println("Vulnerability type:'" + vulnTypeName + 
					"' NOT removed association from Security profile:'" + secProfName + "'");
	}

	private void securityLibraryTest(SecurityProfileComponent spc, String name, String description) {
		if (spc.searchSecurityLibrary(name) == null) {
			if (spc.createSecurityLibrary(name, description) != null)
				System.out.println("Security library:'" + name + "' created");
			else
				System.out.println("Security library:'" + name + "' NOT created");
		}
		else
			System.out.println("Security library:'" + name + "' found");
	}

	private void vulnerabilityTypeTest(SecurityProfileComponent spc, String name, String description) {
		if (spc.searchVulnerabilityType(name) == null) {
			if (spc.createVulnerabilityType(name, description) != null)
				System.out.println("Vulnerability type:'" + name + "' created");
			else
				System.out.println("Vulnerability type:'" + name + "' NOT created");
		}
		else
			System.out.println("Vulnerability type:'" + name + "' found");
	}

	private void securityProfileTest(SecurityProfileComponent spc, String name, String desc) {
		if (spc.searchSecurityProfile(name) == null) {
			if (spc.createSecurityProfile(name, desc) != null)
				System.out.println(name + " created");
			else
				System.out.println(name + " NOT created");
		}
		else
			System.out.println(name + " found");
	}

	private void monitoredProjectListTest(SecurityProfileComponent spc, String name, String desc) {
		if (spc.searchMonitoredProjectList(name) == null) {
			if (spc.createMonitoredProjectList(name, desc, "fotis") != null)
				System.out.println(name + " created");
			else
				System.out.println(name + " NOT created");
		}
		else
			System.out.println(name + " found");
	}
	
	private void monitoredProjectListTest(SecurityProfileComponent spc, String name, String desc, String spname) {
		if (spc.searchMonitoredProjectList(name) == null) {
			if (spc.createMonitoredProjectList(name, desc, "fotis", spname) != null)
				System.out.println(name + " created");
			else
				System.out.println(name + " NOT created");
		}
		else
			System.out.println(name + " found");
	}

	@Override
	public boolean shutDown() {
		return true;
	}
}
