package gr.tracer.platform.components.impl;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import eu.sqooss.core.AlitheiaCore;
import eu.sqooss.service.abstractmetric.AlitheiaPlugin;
import eu.sqooss.service.db.StoredProject;
import eu.sqooss.service.logging.Logger;
import eu.sqooss.service.metricactivator.MetricActivationException;
import eu.sqooss.service.metricactivator.MetricActivator;
import eu.sqooss.service.pa.PluginAdmin;
import eu.sqooss.service.pa.PluginInfo;
import gr.tracer.common.VulnerabilityDetector;
import gr.tracer.common.entities.db.MonitoredProjectList;
import gr.tracer.common.entities.db.SecurityProfile;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerPlatform;
import gr.tracer.platform.components.VulnerabilityDetectorActivatorComponent;

public class VulnerabilityDetectorActivatorComponentImpl implements
		VulnerabilityDetectorActivatorComponent {

	private TracerPlatform platform;
	private Logger logger;
	private PluginAdmin pa;
	private MetricActivator ma;
	private Map<VulnerabilityType, VulnerabilityDetector> vulnerabilityDetectors;
	
	
	@Override
	public void initComponent(TracerPlatform platform, Logger logger) {
		this.platform = platform;
		this.logger = logger;
		vulnerabilityDetectors = new HashMap<VulnerabilityType, VulnerabilityDetector>();
	}

	@Override
	public boolean startUp() {
		this.pa = AlitheiaCore.getInstance().getPluginAdmin();
		this.ma = AlitheiaCore.getInstance().getMetricActivator();
		if(pa != null)
			getRegisteredVulnerabilityDetectors();
		else {
			logger.error("Vulnerability Detector Activator was unable to retrieve PluginAdmin");
			return false;
		}
		return true;
	}

	@Override
	public boolean shutDown() {
		vulnerabilityDetectors.clear();
		return true;
	}

	@Override
	public boolean activateVulnerabilityDetectors(MonitoredProjectList mpl)
			throws MetricActivationException {
		
		for(VulnerabilityDetector vd: getActivationTargets(mpl.getSecurityProfile())) {
			//schedule metric sync => plugin activation
			for(StoredProject sp : mpl.getProjects()) {
				ma.syncMetric(vd, sp);
			}
		}
		
		return false;
	}
	
	private void getRegisteredVulnerabilityDetectors() {
		for(PluginInfo pi: pa.listPlugins()) {
			AlitheiaPlugin plugin = pa.getPlugin(pi);
			if(implementsInterface(plugin, VulnerabilityDetector.class)) {
				VulnerabilityDetector vd = (VulnerabilityDetector)plugin;
				for(VulnerabilityType vt : vd.getDetectedVulnerabilityTypes()) {
					vulnerabilityDetectors.put(vt, vd);
				}
			}
		}
	}
	
	private Set<VulnerabilityDetector> getActivationTargets(SecurityProfile sp) {
		
		Set<VulnerabilityDetector> result = new HashSet<VulnerabilityDetector>();
		
		for(VulnerabilityType vt: sp.getDetectedVulnerabilityTypes()) {
			result.add(vulnerabilityDetectors.get(vt));
		}
		
		return result;
	}

	private static boolean implementsInterface(Object obj, Class iface){
	    return iface.isInstance(obj);
	}
	
}
