package gr.tracer.platform.components;

import java.util.Collections;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import eu.sqooss.service.db.DBService;
import eu.sqooss.service.logging.Logger;
import gr.tracer.common.entities.Vulnerability;
import gr.tracer.common.entities.VulnerabilityList;
import gr.tracer.common.entities.db.SecurityLibrary;
import gr.tracer.common.entities.db.SecurityProfile;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerPlatform;

public class VulnerabilityComponentImpl implements VulnerabilityComponent {
	
	private TracerPlatform platform;
	private Logger logger;
	private DBService dbs;
	private Map<String, Object> vulProps;
    private Object lockObject = new Object();
	
	@Override
	public List<VulnerabilityType> getVulnerabilityList() {
		
		StringBuilder q = new StringBuilder("from VulnerabilityType vt");
		return (List<VulnerabilityType>) dbs.doHQL(q.toString());
	}

	@Override
	public VulnerabilityType getVulnerability(int aAVd_index) {
		try {
	    	if(dbs.startDBSession()) {
	    		return dbs.findObjectById(VulnerabilityType.class, aAVd_index);
	    	}
	    	else
	    		return null;
    	}
    	finally {
    		if(dbs.isDBSessionActive())
    			dbs.commitDBSession();
    	}
	}
	
	@Override
	public boolean createVulnerability(String vName, String vDescription, long slId) {
		VulnerabilityType vt = new VulnerabilityType();
		vt.setName(vName);
		vt.setDescription(vDescription);
		if(dbs != null && dbs.startDBSession())
    	{
    		if(dbs.addRecord(vt)) 
    			return dbs.commitDBSession();
    	}
    	return false;
	}

	@Override
	public List<VulnerabilityType> searchVulnerability(String aAName) {
		try {
			if (dbs.startDBSession()) {
				synchronized (lockObject) {
					vulProps.clear();
					vulProps.put("name", aAName);
					return dbs.findObjectsByProperties(VulnerabilityType.class, vulProps);
				}
			} else {
				logger.info("Failed to start DBSession");
			}
		} finally {
			if (dbs.isDBSessionActive())
				dbs.commitDBSession();
		}
		return Collections.emptyList();
	}
	
	@Override
	public boolean addSecurityLibraryToVulnerabilityType(long slId, long vtId) {
        dbs.startDBSession();
        try {
        	SecurityLibrary sl = dbs.findObjectById(SecurityLibrary.class, slId);
            VulnerabilityType vt = dbs.findObjectById(VulnerabilityType.class, vtId);
            if ((sl!=null) && (vt != null)) {
                return ((sl.getTreatedVulnerabilityTypes().add(vt)) &&
                        (vt.getTreatingSecurityLibraries().add(sl)));
            } else {
                return false;
            }
        } finally {
            dbs.commitDBSession();
        }
    }

	@Override
	public void addVulnerabilityToVulnerabilityList(Vulnerability aAVl) {
		
	}

	@Override
	public void initComponent(TracerPlatform platform, Logger logger) {
		// TODO Auto-generated method stub
		this.platform = platform;
		this.logger = logger;
	}

	@Override
	public boolean startUp() {
		// TODO Auto-generated method stub
		this.dbs = platform.getDB();
		vulProps = new Hashtable<String, Object>(1);
		return true;
	}

	@Override
	public boolean shutDown() {
		// TODO Auto-generated method stub
		return false;
	}

}
