package gr.tracer.platform.components;

import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import eu.sqooss.service.db.DBService;
import eu.sqooss.service.logging.Logger;
import gr.tracer.common.entities.db.SecurityLibrary;
import gr.tracer.common.entities.db.VulnerabilityType;
import gr.tracer.platform.TracerPlatform;

public class VulnerabilityDetectorComponentImpl implements
		VulnerabilityDetectorComponent {

	private TracerPlatform platform;
	private Logger logger;
	private DBService dbs;
	private Map<String, Object> vulTypeProps;
    private Object lockObject = new Object();
	
	@Override
	public void initComponent(TracerPlatform platform, Logger logger) {
		// TODO Auto-generated method stub
		this.platform = platform;
		this.logger = logger;
	}

	@Override
	public boolean startUp() {
		// TODO Auto-generated method stub
		this.dbs = platform.getDB();
		vulTypeProps = new Hashtable<String, Object>(1);
		createVulnerabilityType("Sql","Sql type");
		if (searchVulnerabilityType("sql") != null)
			System.out.println("Found Security Library");
		return true;
	}

	@Override
	public boolean shutDown() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<VulnerabilityType> getVulnerabilityTypes() {
		// TODO Auto-generated method stub
		StringBuilder q = new StringBuilder("from VulnerabilityType vt");
		return (List<VulnerabilityType>) dbs.doHQL(q.toString());
	}

	@Override
	public VulnerabilityType getVulnerabilityType(int vtId) {
		// TODO Auto-generated method stub
		try {
	    	if(dbs.startDBSession()) {
	    		return dbs.findObjectById(VulnerabilityType.class, vtId);
	    	}
	    	else
	    		return null;
    	}
    	finally {
    		if(dbs.isDBSessionActive())
    			dbs.commitDBSession();
    	}
	}

	@Override
	public boolean createVulnerabilityType(String vtName, String vtDescription) {
		// TODO Auto-generated method stub
		VulnerabilityType vt = new VulnerabilityType();
		vt.setName(vtName);
		vt.setDescription(vtDescription);
		if(dbs != null && dbs.startDBSession())
    	{
    		if(dbs.addRecord(vt)) 
    			return dbs.commitDBSession();
    	}
    	return false;
	}

	@Override
	public VulnerabilityType searchVulnerabilityType(String vtName) {
		// TODO Auto-generated method stub
		List<VulnerabilityType> vulTypes = null;
		try {
			if (dbs.startDBSession()) {
				synchronized (lockObject) {
					vulTypeProps.clear();
					vulTypeProps.put("name", vtName);
					vulTypes = dbs.findObjectsByProperties(VulnerabilityType.class, vulTypeProps);
				}
			} else {
				logger.info("Failed to start DBSession");
			}
			 if (vulTypes.size() != 0) {
				 return vulTypes.get(0);
				 }
		} finally {
			if (dbs.isDBSessionActive())
				dbs.commitDBSession();
		}
		return null;
	}

}
