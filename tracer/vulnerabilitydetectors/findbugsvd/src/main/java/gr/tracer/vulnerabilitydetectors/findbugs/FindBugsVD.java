/* This is the package for this particular plug-in. Third-party
** applications will want a different package name, but it is
** *ESSENTIAL* that the package name contain the string '.metrics.'
** because this is how Alitheia Core discovers the metric plug-ins. 
*/
package gr.tracer.vulnerabilitydetectors.findbugs;

import java.io.File;
import java.util.List;

import org.osgi.framework.BundleContext;

/* These are imports of standard Alitheia core services and types.
** You are going to need these anyway; some others that you might
** need are the FDS and other Metric interfaces, as well as more
** DAO types from the database service.
*/
import eu.sqooss.service.abstractmetric.AbstractMetric;
import eu.sqooss.service.abstractmetric.AlreadyProcessingException;
import eu.sqooss.service.abstractmetric.MetricDecl;
import eu.sqooss.service.abstractmetric.MetricDeclarations;
import eu.sqooss.service.abstractmetric.Result;
import eu.sqooss.service.db.Metric;
import eu.sqooss.service.db.ProjectFile;
import gr.tracer.common.DetectedVulnerabilities;
import gr.tracer.common.DetectedVulnerability;
import gr.tracer.common.VulnerabilityDetectorBase;

/**
 * The VDSkeleton class actually implements the metrics and vulnerability
 * detection in this plug-in. It must extend VulnerabilityDetectorBase, so
 * that it can be called by the various metrics drivers.
 *  
 */ 
@MetricDeclarations(metrics= {
	@MetricDecl(mnemonic="SQLINJ", activators={ProjectFile.class}, descr="SQL Injections metric")
})
@DetectedVulnerabilities(vulnerabilities = {
	@DetectedVulnerability(name="SQL Injection", description="SQL Injection Vulnerability",	activators={ProjectFile.class})
})
public class FindBugsVD extends VulnerabilityDetectorBase {
    
    public FindBugsVD(BundleContext bc) {
        super(bc);        
    }

    public List<Result> getResult(ProjectFile a, Metric m) {
        // Return a list of ResultEntries by querying the DB for the 
        // measurements implement by the supported metric and calculated 
        // for the specific project file.
        return null;
    }
    
    public void run(ProjectFile a) {
        // 1. Get stuff related to the provided project file
        // 2. Calculate one or more numbers
        // 3. Store a result to the database
    }
	
	public void processResults(ProjectFile a, File outputFile)
			throws AlreadyProcessingException, Exception {
		// 1. parse the external tool output file
		// 2. extract detected vulnerabilities
		// 3. store them in the database
	}
}

// vi: ai nosi sw=4 ts=4 expandtab
