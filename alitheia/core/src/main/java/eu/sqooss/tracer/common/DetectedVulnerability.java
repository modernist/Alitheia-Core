package eu.sqooss.tracer.common;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import eu.sqooss.service.db.DAObject;


/**
 * Declares a vulnerability type detected by a vulnerability detector plugin.
 * At compile time, the annotation is used to check whether a processResults() and
 * getResult() methods have been defined for each different activation type. At
 * runtime, it is used to automatically get vulnerability type declarations from the
 * annotated vulnerability detector plug-in. 
 *  
 * @author Kostas Stroggylos <stroggylos@gmail.com>
 * @see gr.tracer.common.DetectedVulnerabilities
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE})
public @interface DetectedVulnerability {

	/**
	 * The vulnerability type mnemonic name, an (up to) 255 char String.
	 */
	String name();
	
	/**
	 * The vulnerability type description, an (up to) 255 char String.
	 */
	String description();
	
    /**
     * A list of object types whose changes can activate the vulnerability detection. By
     * convention, the first entry is the entity to which the metric results are
     * bound to.
     */
    Class<? extends DAObject>[] activators();
}
