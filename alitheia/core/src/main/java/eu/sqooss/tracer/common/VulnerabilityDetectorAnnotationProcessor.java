package eu.sqooss.tracer.common;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

@SupportedAnnotationTypes("gr.tracer.common.*")
public class VulnerabilityDetectorAnnotationProcessor extends AbstractProcessor {
	Set<String> activators = new HashSet<String>();

	@Override
    public void init(ProcessingEnvironment pe) {
        super.init(pe);
    }
	
	@Override
	public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment) {
		
		Messager messager = processingEnv.getMessager();

        for (TypeElement typeElement : annotations) {
            for (Element element : roundEnvironment.getElementsAnnotatedWith(typeElement)) {
                if (!meetsRequirements(element)) {
                    messager.printMessage(
                            Diagnostic.Kind.ERROR,
                            element.getSimpleName() + " lacks a no-arg constructor or required getResults / processResults method implementations",
                            element
                            );
                }
            }
        }
		
		return true;
	}
	
	private static boolean meetsRequirements(Element element) {
        if (element.getModifiers().contains(Modifier.ABSTRACT)) {
            // class is not concrete
            return true;
        }

        Set<Element> declaredMethods = new HashSet<Element>();
        for(Element subElement: element.getEnclosedElements()) {
        	if(subElement.getKind() == ElementKind.METHOD)
        		declaredMethods.add(subElement);
        }
        //TODO: check if the required getResults / processResults methods have
        //been defined for all the supported activation types
        return true;
    }
}